{
	"nodes":[
		{"id":"24a1502c3fa7c23e","type":"file","file":"Pasted image 20240325091458.png","x":-460,"y":-200,"width":600,"height":297},
		{"id":"d737b641164ad41a","type":"file","file":"Pasted image 20240325123230.png","x":-460,"y":220,"width":595,"height":300},
		{"id":"52c5954fb778a891","type":"file","file":"Pasted image 20240325123305.png","x":-460,"y":520,"width":595,"height":206},
		{"id":"c34d53aeda6b8f3d","type":"text","text":"```java\n// ControlUser.java\n\n@Controller\npublic class ControlUser {\n\n    @Autowired\n    private ServiceUser serviceUser;\n\n    @PostMapping(\"/check-user\")\n    public String checkUser(@RequestParam(\"nametext\") String username, Model model) {\n        boolean isUsed = serviceUser.verifier(username);\n        if (isUsed) {\n            model.addAttribute(\"message\", \"username déjà utilisé\");\n        } else {\n            model.addAttribute(\"message\", \"username non utilisé\");\n        }\n        return \"verification-resultat\";\n    }\n}\n\n// ServiceUser.java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class ServiceUser {\n\n    public boolean verifier(String username) {\n        return username.length() > 10;\n    }\n}\n\n// verification-resultat.jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Verification Resultat</title>\n</head>\n<body>\n    <p>${message}</p>\n</body>\n</html>\n\n```","x":135,"y":200,"width":633,"height":740},
		{"id":"89821ffd9475f5bf","type":"text","text":"Creer interface IControlService","x":-460,"y":726,"width":250,"height":50},
		{"id":"44b22e984a40e405","type":"text","text":"```java\npublic interface IProductManagement extends JpaRepository<Product, Integer> {}\n```","x":-460,"y":776,"width":595,"height":50},
		{"id":"a6f4f0180dc60aaa","type":"text","text":"- Non, Spring Core n'a pas besoin de Tomcat.\n- Spring 6 se concentre sur le support de Java 17+ et introduit de nouvelles fonctionnalités.\n- Spring contient un ensemble de frameworks.\n- Faux, les beans de Spring et les beans JavaEE sont différents.\n- @Controller est spécifique pour le traitement des requêtes web dans Spring MVC, tandis que @Component est plus générique.\n- Faux, les beans de Spring peuvent être configurés via XML ou annotations.\n- Glassfish supporte entièrement les spécifications Java EE, offrant un avantage pour utiliser JSTL par rapport à Tomcat qui est un conteneur de servlets.\n- Faux, pas besoin de créer une servlet explicite pour utiliser Spring MVC.\n- @RequestParam peut être utilisé dans les deux, GET et POST.\n- Redirect envoie un nouvel ordre de navigation au client, forward transfère la requête à une autre ressource sur le serveur.","x":119,"y":-200,"width":666,"height":297}
	],
	"edges":[]
}